<div class="game-main">
  <div style="display: flex; justify-content: center; align-items: center; gap: 20px; padding: 10px">
    <!-- The Table Grid -->

    <% @tiles.inspect %>
    <table>
      <% (-3..3).each do |y| %>
        <tr>
          <% (-3..3).each do |x| %>
            <td style="background-color: <%= @tiles[[x, y]] %>;">
              <div class="content">
                <button
                    id="tile-<%= x %>-<%= y %>"
                    class="cell-button"
                    onclick="clickCell(<%= x %>, <%= y %>, '<%= @tiles[[x, y]] %>')">
                </button>
              </div>
            </td>
          <% end %>
        </tr>
      <% end %>
    </table>

    <!-- Navigation Buttons -->
    <div class="navigation plus-layout" id="movement">
      <button class="move-button move-up" onclick="move('up')">▲</button>
      <button class="move-button move-left" onclick="move('left')">◀</button>
      <button class="move-button move-center"></button>
      <button class="move-button move-right" onclick="move('right')">▶</button>
      <button class="move-button move-down" onclick="move('down')">▼</button>
    </div>
  </div>
</div>

<script>
    const biome_map = {
        yellow: 'Desert',
        gray: 'Mountain',
        green: 'Forest',
        blue: 'Ocean'
    };

    const cellColors = <%= raw @tiles.to_json %>;
    const gameId = <%= @current_game.id %>;
    const currentCharacter = <%= raw @current_character.to_json %>;
    let current_position = [currentCharacter.x_position, currentCharacter.y_position];

    // Get the CSRF token from the meta tags
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    let previous_position = null;
    let current_biome = biome_map[cellColors[formatKey(current_position)]];

    //Looping poll variables
    let characterPoll;

    let loading = false;

    displayCurrentBiome();
    renderAllCharacters();

    fetch(`/tiles/get_tile?x=${current_position[0]}&y=${current_position[1]}`)
      .then((response) => {
          if (!response.ok) {
              throw new Error("Tile not found.");
          }
          return response.json();
      })
      .then((data) => {
          if (data.error) {
              console.error(data.error);
              updateGameSection(`<p>${data.error}</p>`);
          } else {
              updateTileInfoSection(data);
          }
      })
      .catch((error) => {
          console.error("Error fetching tile:", error);
          updateGameSection(`<p>Error fetching tile information.</p>`);
      });

    function displayCurrentBiome() {
        console.log("Current Biome: ", current_biome);
    }

    function formatKey(position) {
        return `[${position[0]}, ${position[1]}]`;
    }

    function clickCell(x, y, color) {
        console.log("Point: ", x, y);
        console.log("Biome: ", biome_map[color]);

        const tileInfo = `
      <h3>Tile Information</h3>
      <p>Loading...</p>
    `;
        updateGameSection(tileInfo);

        // Fetch tile information from the backend
        fetch(`/tiles/get_tile?x=${x}&y=${y}`)
          .then((response) => {
              if (!response.ok) {
                  throw new Error("Tile not found.");
              }
              return response.json();
          })
          .then((data) => {
              if (data.error) {
                  console.error(data.error);
                  updateGameSection(`<p>${data.error}</p>`);
              } else {
                  updateTileInfoSection(data);
              }
          })
          .catch((error) => {
              console.error("Error fetching tile:", error);
              updateGameSection(`<p>Error fetching tile information.</p>`);
          });
    }

    // Function to handle taking the treasure
    function takeTreasure(x, y) {
        fetch(`/tiles/loot_tile`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify({ x: x, y: y })
        })
          .then(response => response.json())
          .then(data => {
              if (data.success) {
                  // Re-fetch the tile to update displayed info
                  refreshTileInfo(x, y);

                  // NEW: Refresh Items Section
                  refreshItems();
              } else {
                  refreshTileInfo(x, y);
                  console.error(data.message);
                  alert(data.message);
              }
          })
          .catch(error => {
              console.error("Error looting treasure:", error);
          });
    }


    // Function to handle fighting the monster
    function fightMonster(x, y) {
        fetch(`/tiles/fight_monster`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify({ x: x, y: y })
        })
          .then(response => response.json())
          .then(data => {
              if (data.success) {
                  // Update the tile information
                  refreshTileInfo(x, y);

                  // Update character info directly
                  if (data.character) {
                      updateCharacterInfo(data.character);
                  }

                  // Notify the user about the result
                  if (data.result === "player_win") {
                      alert("You defeated the monster!");
                  } else if (data.result === "monster_win") {
                      alert("You lost to the monster. Be careful!");
                  } else if (data.result === "player_died") {
                      alert(data.message); // Display death message
                  }
              } else {
                  refreshTileInfo(x, y);
                  console.error(data.message);
                  alert(data.message);
              }
          })
          .catch(error => {
              console.error("Error fighting monster:", error);
          });
    }

    // Function to update character info in the DOM
    function updateCharacterInfo(character) {
        // Update level text
        const levelText = document.querySelector('.character-details p:nth-child(2) .character-value');
        if (levelText) {
            levelText.textContent = character.level;
        }

        // Update health values and health bar
        const healthBar = document.querySelector('.health-bar .health-fill');
        const currHealthText = document.querySelector('.health-bar-container p .character-value');


        if (healthBar && currHealthText) {
            const healthPercentage = (character.current_health / character.max_health) * 100;

            // Update health bar width
            healthBar.style.width = `${healthPercentage.toFixed(2)}%`;

            // Update health text
            currHealthText.textContent = `${character.current_health}`;
        }
    }



    // A helper function to re-fetch tile info after updates
    async function refreshTileInfo(x, y) {
        const tileInfo = `
      <h3>Tile Information</h3>
      <p>Loading...</p>
    `;
        updateGameSection(tileInfo);

        await fetch(`/tiles/get_tile?x=${x}&y=${y}`)
          .then(response => response.json())
          .then(data => {
              if (data.error) {
                  updateGameSection(`<p>${data.error}</p>`);
              } else {
                  updateTileInfoSection(data);
              }
          })
          .catch(error => console.error("Error refreshing tile info:", error));
    }

    function updateTileInfoSection(data) {
        // Check if user is on this tile
        const isCurrentPosition = (data.x === current_position[0] && data.y === current_position[1]);

        let tileInfo = `
            <h3>Tile Information</h3>
            <p><strong>Position:</strong> (${data.x}, ${-data.y})</p>
            <p><strong>Biome:</strong> ${biome_map[data.biome]}</p>
            <br>
            <p><strong>Picture:</strong> ${data.picture || 'None'}</p>
            <br>
            <p><strong>Scene Description:</strong> ${data.scene_description || 'N/A'}</p>
            <br>
            <p><strong>Treasure Description:</strong> ${data.treasure_description || 'N/A'}</p>
            <br>
            <p><strong>Monster Description:</strong> ${data.monster_description || 'N/A'}</p>
            <p><strong>Monster Level:</strong> ${data.monster_level || 'N/A'}</p>
        `;

        // Determine button states
        let buttonDisabled = '';
        let buttonStyle = '';

        if (!isCurrentPosition) {
            buttonDisabled = 'disabled';
            buttonStyle = 'style="color:gray; background-color:#ccc;"';
        }

        tileInfo += `<div style="margin-top: 10px" />`

        // Add the Loot button if treasure_description exists
        if (data.treasure_description && data.treasure_description.trim() !== '') {
            tileInfo += `
              <button id="loot-button" class="btn-secondary" onclick="takeTreasure(${data.x}, ${data.y})" ${buttonDisabled} ${buttonStyle}>
                  Loot
              </button>
            `;
        }

        // Add the Fight button if monster_description exists
        if (data.monster_description && data.monster_description.trim() !== '') {
            tileInfo += `
              <button id="fight-button" class="btn-secondary" onclick="fightMonster(${data.x}, ${data.y})" ${buttonDisabled} ${buttonStyle}>
                Fight
              </button>
            `;
        }

        tileInfo += `
              <button id="regenerate-button" class="btn-secondary" onclick="regenerateTile(${data.x}, ${data.y})">
                Regenerate
              </button>
            `;

        updateGameSection(tileInfo);
    }

    async function regenerateTile(x, y) {

    }

    async function renderAllCharacters() {
        clearTimeout(characterPoll); // Do not let the timeout loops stack!
        const characterIcon = '●';
        const playerIcon = '✪';

        let response = (await fetch(`/characters`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
        }));
        characters = (await response.json()).characters;

        //Wait until the response is collected before attempting to redraw the character positions.
        const renderedContents = document.querySelectorAll('.player');
        for (const content of renderedContents) {
            content.remove();
        }

        // Render all characters on their respective tiles
        for (const character of characters) {
            const tile = document.getElementById(`tile-${character.x_position}-${character.y_position}`);
            if (tile) { // Check if the tile exists
                if (tile.firstElementChild) { //There is already a player representation here
                    const characterCount = Number(tile.firstElementChild.getAttribute("data-count")) + 1
                    tile.firstElementChild.setAttribute("data-count",characterCount)
                    tile.firstElementChild.innerHTML = character.username + "<br>"
                      + characterIcon + "x" + characterCount
                } else {
                    const newContent = document.createElement('div');
                    newContent.setAttribute("data-count","1")
                    newContent.className = 'player';
                    if (character.id === currentCharacter.id) {
                        newContent.innerHTML = character.username + "<br>" + playerIcon;
                    } else {
                        newContent.innerHTML = character.username + "<br>" + characterIcon;
                    }
                    tile.appendChild(newContent);
                }
            }
        }
        // Call myself every 3 seconds after the last time I have been called.
        characterPoll = setTimeout(() => {renderAllCharacters()}, 3000)
    }

    function move(direction) {
        loading = true;
        let [x, y] = current_position;

        switch (direction) {
            case 'up':
                y -= 1; // Move up (decrease y)
                break;
            case 'down':
                y += 1; // Move down (increase y)
                break;
            case 'left':
                x -= 1; // Move left (decrease x)
                break;
            case 'right':
                x += 1; // Move right (increase x)
                break;
            default:
                console.log("Invalid direction");
                return;
        }

        // Ensure the new position is within bounds
        if (x < -3 || x > 3 || y < -3 || y > 3) {
            console.log("Cannot move outside the grid boundaries.");
            return;
        }

        current_position = [x, y];
        current_biome = biome_map[cellColors[formatKey(current_position)]];

        const moveButtons = document.getElementById("movement").childNodes
        moveButtons.forEach((button) => { // Disable the buttons until the screen has updated.
            button.disabled = true
        })

        fetch(`/move_character?x=${x}&y=${y}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
        });

        renderAllCharacters();
        displayCurrentBiome();
        refreshTileInfo(x, y);

        // I am disabling the buttons on movement and re-enabling them after 0.5 seconds to allow for the movement to
        // refresh.
        setTimeout(()=>{
            moveButtons.forEach((button) => {
              button.disabled = false
          })}, 500);
        console.log(`Moved ${direction} to position: (${x}, ${y})`);
    }

    function updateGameSection(content) {
        const gameSection = document.getElementById("GameSection");
        if (gameSection) {
            gameSection.innerHTML = `
                <h2>Tile</h2>
                ${content}`;
        }
    }

    function refreshItems() {
        fetch('/characters/items', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            }
        })
          .then(response => response.json())
          .then(data => {
              updateItemsSection(data.items);
          })
          .catch(error => console.error("Error fetching items:", error));
    }

    function updateItemsSection(items) {
        const itemsSection = document.getElementById('ItemsSection');
        if (!itemsSection) return;

        let html = '<h2 class="text-with-border">Your Items</h2>';
        if (items && items.length > 0) {
            items.forEach(item => {
                html += `
        <div class="item text-with-border" data-item-id="${item.id}">
          <h3 class="text-with-border">${item.name}</h3>
          <p class="text-with-border"><strong>Level:</strong> ${item.level}</p>
          <p class="text-with-border"><strong>Type:</strong> ${item.item_type}</p>
          <p class="text-with-border"><strong>Description:</strong> ${item.description}</p>
          <button class="btn delete-button">Delete</button>
          <hr>
        </div>
      `;
            });
        } else {
            html += '<p class="text-with-border">You have no items.</p>';
        }

        itemsSection.innerHTML = html;

        // Rebind the delete button event handlers if needed
        const deleteButtons = itemsSection.querySelectorAll(".delete-button");
        deleteButtons.forEach((button) => {
            button.addEventListener("click", handleDeleteItem);
        });
    }

    function handleDeleteItem(event) {
        const itemElement = event.target.closest(".item");
        const itemId = itemElement.getAttribute("data-item-id");

        if (confirm("Are you sure you want to delete this item?")) {
            fetch(`/items/${itemId}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                    'Accept': 'application/json'
                }
            }).then((response) => {
                if (response.ok) {
                    itemElement.remove();
                } else {
                    alert("There was an error deleting the item.");
                }
            }).catch((error) => {
                console.error("Error:", error);
                alert("An error occurred while deleting the item.");
            });
        }
    }

</script>

<style>
    table {
        max-width: 500px; /* Set a maximum size for the table */
        border-collapse: collapse; /* Keep the borders clean */
    }

    td {
        width: 14.3%; /* 1/7th of the table width for even columns */
        border: 2px solid black;
        position: relative;
    }

    td .content {
        aspect-ratio: 1 / 1; /* Maintain square cells */
        width: 100%; /* Fill the parent td */
    }

    .cell-button {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: transparent; /* Make the button invisible */
        border: none; /* Remove default button border */
        cursor: pointer; /* Make it clickable */
    }

    .cell-button:hover {
        background-color: rgba(0, 0, 0, 0.1); /* Optional: Add a hover effect */
    }

    .navigation {
        position: relative;
        width: 150px;
        height: 150px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .move-button {
        width: 50px;
        height: 50px;
        background-color: lightgray;
        border: 2px solid black;
        border-radius: 50%;
        text-align: center;
        font-size: 20px;
        cursor: pointer;
        position: absolute;
        transition: background-color 0.2s ease; /* Smooth transition effect */
    }

    .move-up {
        top: 0;
        left: 50%;
        transform: translateX(-50%);
    }

    .move-left {
        top: 50%;
        left: 0;
        transform: translateY(-50%);
    }

    .move-center {
        display: none;
    }

    .move-right {
        top: 50%;
        right: 0;
        transform: translateY(-50%);
    }

    .move-down {
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
    }

    .move-button:hover {
        background-color: #fff; /* Slightly darker gray */
    }

    .player {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 14px;
        color: black;
        pointer-events: none; /* Make it non-interactive */
    }
</style>

<!-- app/views/games/_chat.html.erb -->
<div class="game-right">
  <!-- Character Info Section -->
  <div class="character-info">
    <h2 class="character-title">Character Info</h2>
    <% if @current_character.present? %>
      <div class="character-details">
        <p><strong>Username:</strong> <span class="character-value"><%= @current_user.username %></span></p>
        <p><strong>Level:</strong> <span class="character-value"><%= @current_character.level %></span></p>
        <p><strong>Shards: <span class="character-value" id="shard_amount"><%= @current_user.shard_amount %></span></strong>
        <!-- Fancy Health Bar -->
        <div class="health-bar-container">
          <p><strong>HP:</strong>
            <span class="character-value" id="currHealth"><%= @current_character.currentHealth %></span> /
            <span class="character-value" id="maxHealth"><%= @current_character.maxHealth %> </span>
          </p>
          <div class="health-bar">
            <div class="health-fill" style="width: <%= ((@current_character.currentHealth.to_f / @current_character.maxHealth.to_f) * 100).round(2) %>%;"></div>
          </div>
        </div>
      </div>
    <% else %>
      <p class="no-character-info">No character info available.</p>
    <% end %>
  </div>

  <!-- Chat Section -->
  <div class="chat-container">
    <h2>Chat</h2>
    <div class="chat-messages" id="chat-messages">
    </div>
    <form id="send_form">
      <input type="text" id="message_input" required class="chat-input">
      <button type="button" id="submit_button" class="btn">Submit</button>
    </form>
  </div>
</div>

<script>
    var chatPoll;
    updateChat()

    document.getElementById('submit_button').addEventListener('click', () => {
        let input = document.getElementById('message_input');
        fetch(`/chat?message=${input.value}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
        });


        // clear the input field.
        input.value = "";
        updateChat();
    });

    async function updateChat() {
        clearTimeout(chatPoll) //If this gets manually called, do not recall it while executing.
        let response = (await fetch(`/chat`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
        }));
        const chatLog = await (response.json())

        const chatBox = document.getElementById('chat-messages')

        if (chatBox)
            chatBox.innerHTML = '' // Remove the old chat messages

        for (const message of chatLog.chatLog) { // Create the new messages.
            let newEntry = document.createElement('div')
            newEntry.innerHTML = '<strong>'+message.user+':</strong> '+message.message
            if (chatBox)
                chatBox.appendChild(newEntry)
        }

        chatPoll = setTimeout(() => {updateChat()}, 3000) // Call myself again 3 seconds after the last time I have been called.
    }
</script>


<style>
    .character-info {
        font-family: 'Arial', sans-serif;
        max-width: 400px;
        margin: 20px auto;
        padding: 15px;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background: #f9f9f9;
    }

    .character-title {
        font-size: 24px;
        font-weight: bold;
        color: #333;
        text-align: center;
        margin-bottom: 15px;
    }

    .character-details p {
        font-size: 16px;
        line-height: 1.5;
        margin: 10px 0;
        color: #555;
    }

    .character-details strong {
        color: #222;
    }

    .character-value {
        font-weight: bold;
        color: #007BFF;
    }

    .no-character-info {
        font-size: 16px;
        color: #888;
        text-align: center;
        margin-top: 15px;
    }

    .health-bar-container {
        text-align: center;
        margin: 15px 0;
    }

    .health-bar {
        width: 200px;
        height: 20px;
        background: #333; /* Black background for depletion */
        border: 2px solid #555;
        border-radius: 5px;
        margin: 0 auto;
        overflow: hidden;
        position: relative;
    }

    .health-fill {
        height: 100%;
        background: linear-gradient(to right, #00FF00, #009900);
        transition: width 0.5s ease-in-out;
    }
</style>

<div style="display: flex; justify-content: center; align-items: center; gap: 20px;">
  <!-- The Table Grid -->
  <table>
    <% (-3..3).each do |y| %>
      <tr>
        <% (-3..3).each do |x| %>
          <td style="background-color: <%= @cell_colors[[x, y]] %>;">
            <div class="content">
              <button
                class="cell-button"
                onclick="clickCell(<%= x %>, <%= y %>, '<%= @cell_colors[[x, y]] %>')">
              </button>
            </div>
          </td>
        <% end %>
      </tr>
    <% end %>
  </table>

  <!-- Navigation Buttons -->
  <div class="navigation plus-layout">
    <button class="move-button move-up" onclick="move('up')">▲</button>
    <button class="move-button move-left" onclick="move('left')">◀</button>
    <button class="move-button move-center"></button>
    <button class="move-button move-right" onclick="move('right')">▶</button>
    <button class="move-button move-down" onclick="move('down')">▼</button>
  </div>
</div>

<script>
    const biome_map = {
        yellow: 'desert',
        gray: 'mountain',
        green: 'forest',
        blue: 'ocean'
    };

    const cellColors = <%= raw @cell_colors.to_json %>;

    let current_position = [0, 0];

    let current_biome = biome_map[cellColors[formatKey(current_position)]];

    displayCurrentBiome();

    function displayCurrentBiome() {
        console.log("Current Biome: ", current_biome);
    }

    function formatKey(position) {
        return `[${position[0]}, ${position[1]}]`;
    }

    function clickCell(x, y, color) {
        console.log("Point: ", x, y);
        console.log("Biome: ", biome_map[color]);
    }

    function move(direction) {
        const [currentX, currentY] = current_position;

        let newX = currentX;
        let newY = currentY;

        switch (direction) {
            case 'up':
                newY -= 1; // Move up (decrease y)
                break;
            case 'down':
                newY += 1; // Move down (increase y)
                break;
            case 'left':
                newX -= 1; // Move left (decrease x)
                break;
            case 'right':
                newX += 1; // Move right (increase x)
                break;
            default:
                console.log("Invalid direction");
                return;
        }

        // Ensure the new position is within bounds
        if (newX < -3 || newX > 3 || newY < -3 || newY > 3) {
            console.log("Cannot move outside the grid boundaries.");
            return;
        }

        // Update the current position
        current_position = [newX, newY];
        current_biome = biome_map[cellColors[formatKey(current_position)]];

        displayCurrentBiome();
        console.log(`Moved ${direction} to position: (${newX}, ${newY})`);

    }
</script>

<style>
    table {
        max-width: 500px; /* Set a maximum size for the table */
        border-collapse: collapse; /* Keep the borders clean */
    }

    td {
        width: 14.3%; /* 1/7th of the table width for even columns */
        border: 2px solid black;
        position: relative;
    }

    td .content {
        aspect-ratio: 1 / 1; /* Maintain square cells */
        width: 100%; /* Fill the parent td */
    }

    .cell-button {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: transparent; /* Make the button invisible */
        border: none; /* Remove default button border */
        cursor: pointer; /* Make it clickable */
    }

    .cell-button:hover {
        background-color: rgba(0, 0, 0, 0.1); /* Optional: Add a hover effect */
    }

    .navigation {
        position: relative;
        width: 150px;
        height: 150px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .move-button {
        width: 50px;
        height: 50px;
        background-color: lightgray;
        border: 2px solid black;
        border-radius: 50%;
        text-align: center;
        font-size: 20px;
        cursor: pointer;
        position: absolute;
        transition: background-color 0.2s ease; /* Smooth transition effect */
    }

    .move-up {
        top: 0;
        left: 50%;
        transform: translateX(-50%);
    }

    .move-left {
        top: 50%;
        left: 0;
        transform: translateY(-50%);
    }

    .move-center {
        display: none;
    }

    .move-right {
        top: 50%;
        right: 0;
        transform: translateY(-50%);
    }

    .move-down {
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
    }

    .move-button:hover {
        background-color: #fff; /* Slightly darker gray */
    }
</style>

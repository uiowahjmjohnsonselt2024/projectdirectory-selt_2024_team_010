<div class="game-shop" style="display: flex; flex-direction: column; height: 100%;">
  <!-- Main Tabs -->
  <div class="main-tabs" style="flex: 0 0 auto;">
    <button class="main-tablinks active" data-section="ShopSection">Shop</button>
    <button class="main-tablinks" data-section="ItemsSection">Items</button>
    <button class="main-tablinks" data-section="GameSection">Tile</button>
  </div>

  <!-- Shop Section -->
  <div id="ShopSection" class="main-tabcontent" style="flex: 1 0 auto; overflow-y: auto;">
    <div class="shop-container">
      <h2>In-Game Shop</h2>
      <div class="tab">
        <button class="tablinks active" data-category="Weapons">Weapons</button>
        <button class="tablinks" data-category="Armor">Armor</button>
        <button class="tablinks" data-category="Abilities">Abilities</button>
      </div>

      <!-- Weapons Tab Content -->
      <div id="Weapons" class="tabcontent" style="display: block;">
        <!-- Weapons Items List -->
      </div>

      <!-- Armor Tab Content -->
      <div id="Armor" class="tabcontent">
        <!-- Armor Items List -->
      </div>

      <!-- Abilities Tab Content -->
      <div id="Abilities" class="tabcontent">
        <!-- Abilities Items List -->
      </div>
    </div>

    <!-- Button to load AI-generated items -->
    <button id="load-items-button" style="margin-top:20px;">Load Items from AI</button>
  </div>

  <!-- Items Section -->
  <div id="ItemsSection" class="main-tabcontent text-with-border" style="flex: 1 1 auto; max-height: 100%; overflow-y: auto;">
    <h2 class="text-with-border">Your Items</h2>
    <% if @items.present? %>
      <% @items.each do |item| %>
        <div class="item text-with-border" data-item-id="<%= item.id %>">
          <h3 class="text-with-border"><%= item.name %></h3>
          <p class="text-with-border"><strong>Level:</strong> <%= item.level %></p>
          <p class="text-with-border"><strong>Type:</strong> <%= item.item_type %></p>
          <p class="text-with-border"><strong>Description:</strong> <%= item.description %></p>
          <button class="btn delete-button">Delete</button>
          <hr>
        </div>
      <% end %>
    <% else %>
      <p class="text-with-border">You have no items.</p>
    <% end %>
  </div>

  <!-- Game Section -->
  <div id="GameSection" class="main-tabcontent" style="flex: 1 1 auto; max-height: 100%; overflow-y: auto;">
    <h2>Tile</h2>
    <p>Display game-related content here.</p>
  </div>
</div>


<script>
    function initializeTabs() {
        // Main Tabs Logic
        const mainTabs = document.querySelectorAll(".main-tablinks");
        const mainTabContents = document.querySelectorAll(".main-tabcontent");

        mainTabs.forEach((tab) => {
            tab.addEventListener("click", (event) => {
                // Hide all main tab contents
                mainTabContents.forEach((content) => (content.style.display = "none"));

                // Remove active class from all main tabs
                mainTabs.forEach((t) => t.classList.remove("active"));

                // Show selected main tab content
                const sectionId = event.target.dataset.section;
                document.getElementById(sectionId).style.display = "block";

                event.target.classList.add("active");
            });
        });

        // Shop Tabs Logic
        const shopSection = document.getElementById("ShopSection");
        if (shopSection) {
            const shopTabs = shopSection.querySelectorAll(".tablinks");
            const shopTabContents = shopSection.querySelectorAll(".tabcontent");

            shopTabs.forEach((tab) => {
                tab.addEventListener("click", (event) => {
                    shopTabContents.forEach((content) => (content.style.display = "none"));
                    shopTabs.forEach((t) => t.classList.remove("active"));

                    const categoryId = event.target.dataset.category;
                    const categoryContent = shopSection.querySelector(`#${categoryId}`);
                    if (categoryContent) categoryContent.style.display = "block";

                    event.target.classList.add("active");
                });
            });
        }

        initializeBuyButtons();
    }

    function initializeBuyButtons() {
        const buyButtons = document.querySelectorAll(".buy-button");
        buyButtons.forEach((button) => {
            button.addEventListener("click", (event) => {
                const itemDetails = event.target.closest(".item-details");
                const itemName = itemDetails.querySelector("h3").textContent;
                const itemPrice = itemDetails.querySelector("p:nth-child(3)").textContent;
                const itemCategory = itemDetails.dataset.category;
                const itemDescription = itemDetails.dataset.description;
                const itemRarity = itemDetails.dataset.rarity;

                // Convert UI category to allowed backend categories if needed:
                // Assuming: "Weapons" -> "weapon", "Armor" -> "armor", "Abilities" -> "artifact"
                let normalizedCategory = itemCategory.toLowerCase();
                if (normalizedCategory === 'weapons') normalizedCategory = 'weapon';
                if (normalizedCategory === 'armor') normalizedCategory = 'armor';
                if (normalizedCategory === 'abilities') normalizedCategory = 'artifact';

                // Confirm the purchase
                alert(`You have purchased ${itemName} for ${itemPrice}`);

                const itemData = {
                    name: itemName,
                    category: normalizedCategory,
                    description: itemDescription,
                    rarity: itemRarity
                };

                fetch('/gameshop/buy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                    },
                    body: JSON.stringify({ item: itemData })
                })
                  .then(response => response.json())
                  .then(data => {
                      if (data.success) {
                          alert(data.message);
                          // Append the newly purchased item directly:
                          appendNewItemToInventory(data.item);
                      } else {
                          alert("Failed to purchase item.");
                      }
                  })
                  .catch((error) => {
                      console.error("Error purchasing item:", error);
                      alert("There was an error completing the purchase.");
                  });
            });
        });
    }

    function initializeDeleteButtons() {
        const deleteButtons = document.querySelectorAll(".delete-button");
        deleteButtons.forEach((button) => {
            button.addEventListener("click", (event) => {
                const itemElement = event.target.closest(".item");
                const itemId = itemElement.getAttribute("data-item-id");

                if (confirm("Are you sure you want to delete this item?")) {
                    fetch(`/items/${itemId}`, {
                        method: 'DELETE',
                        headers: {
                            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                            'Accept': 'application/json'
                        }
                    }).then((response) => {
                        if (response.ok) {
                            // Remove the item's element from the page
                            itemElement.remove();
                        } else {
                            alert("There was an error deleting the item.");
                        }
                    }).catch((error) => {
                        console.error("Error:", error);
                        alert("An error occurred while deleting the item.");
                    });
                }
            });
        });
    }

    function refreshUserItems() {
        // This function is still here if you want to reload items fully, but no longer needed for immediate purchase updates
        fetch('/items.json', {
            headers: {
                'Accept': 'application/json'
            }
        })
          .then(response => response.json())
          .then(data => {
              const itemsSection = document.getElementById("ItemsSection");

              // Clear existing items
              itemsSection.innerHTML = `
                <h2 class="text-with-border">Your Items</h2>
              `;

              if (data.items && data.items.length > 0) {
                  data.items.forEach(item => {
                      const itemDiv = document.createElement("div");
                      itemDiv.classList.add("item", "text-with-border");
                      itemDiv.setAttribute("data-item-id", item.id);

                      itemDiv.innerHTML = `
                        <h3 class="text-with-border">${item.name}</h3>
                        <p class="text-with-border"><strong>Level:</strong> ${item.level}</p>
                        <p class="text-with-border"><strong>Type:</strong> ${item.item_type}</p>
                        <p class="text-with-border"><strong>Description:</strong> ${item.description}</p>
                        <button class="btn delete-button">Delete</button>
                        <hr>
                      `;

                      itemsSection.appendChild(itemDiv);
                  });

                  initializeDeleteButtons();
              } else {
                  itemsSection.innerHTML += `<p class="text-with-border">You have no items.</p>`;
              }
          })
          .catch(error => console.error("Error refreshing items:", error));
    }

    function appendNewItemToInventory(item) {
        // Append a new item directly to the inventory without clearing:
        const itemsSection = document.getElementById("ItemsSection");

        const itemDiv = document.createElement("div");
        itemDiv.classList.add("item", "text-with-border");
        itemDiv.setAttribute("data-item-id", item.id);

        itemDiv.innerHTML = `
          <h3 class="text-with-border">${item.name}</h3>
          <p class="text-with-border"><strong>Level:</strong> ${item.level}</p>
          <p class="text-with-border"><strong>Type:</strong> ${item.item_type}</p>
          <p class="text-with-border"><strong>Description:</strong> ${item.description}</p>
          <button class="btn delete-button">Delete</button>
          <hr>
        `;
        itemsSection.appendChild(itemDiv);
        initializeDeleteButtons();
    }

    async function loadItems() {
        try {
            const response = await fetch('/gameshop/generate_items.json');
            if (response.ok) {
                const data = await response.json();
                insertItemsIntoShop(data.items);
            } else {
                console.error("Failed to load items");
            }
        } catch (error) {
            console.error("Error fetching items:", error);
        }
    }

    function insertItemsIntoShop(items) {
        const weaponsContainer = document.getElementById("Weapons");
        const armorContainer = document.getElementById("Armor");
        const abilitiesContainer = document.getElementById("Abilities");

        [weaponsContainer, armorContainer, abilitiesContainer].forEach(container => {
            if (container) container.innerHTML = '';
        });

        items.forEach(item => {
            const itemDiv = document.createElement("div");
            itemDiv.classList.add("item-details");

            // Set data-attributes so we can extract them later
            itemDiv.dataset.category = item.category;     // e.g. "Weapons", "Armor", "Abilities"
            itemDiv.dataset.description = item.description;
            itemDiv.dataset.rarity = item.rarity;

            itemDiv.innerHTML = `
              <h3>${item.name}</h3>
              <p>${item.description}</p>
              <p>Price: ${item.price}</p>
              <p>Rarity: ${item.rarity}</p>
              <button class="buy-button">Buy</button>
            `;

            // Append to the correct container
            if (item.category === "Weapons" && weaponsContainer) {
                weaponsContainer.appendChild(itemDiv);
            } else if (item.category === "Armor" && armorContainer) {
                armorContainer.appendChild(itemDiv);
            } else if (item.category === "Abilities" && abilitiesContainer) {
                abilitiesContainer.appendChild(itemDiv);
            }
        });

        initializeBuyButtons();
    }

    document.addEventListener("DOMContentLoaded", () => {
        initializeTabs();
        // Ensure the first main tab is active and visible on initial load:
        const firstMainTab = document.querySelector(".main-tablinks");
        if (firstMainTab) firstMainTab.click();

        loadItems(); // Automatically load items
        const loadItemsButton = document.getElementById("load-items-button");
        if (loadItemsButton) {
            loadItemsButton.addEventListener("click", loadItems);
        }
        initializeDeleteButtons();
    });
</script>

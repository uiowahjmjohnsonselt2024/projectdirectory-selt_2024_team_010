<div class="game-shop" style="display: flex; flex-direction: column; height: 100%; overflow-y: scroll">
  <!-- Main Tabs -->
  <div class="main-tabs" style="flex: 0 0 auto;">
    <button class="main-tablinks active" data-section="ShopSection">Shop</button>
    <button class="main-tablinks" data-section="ItemsSection">Items</button>
    <button class="main-tablinks" data-section="GameSection">Tile</button>
  </div>

  <!-- Shop Section -->
  <div id="ShopSection" class="main-tabcontent" style="display: block; flex: 1 0 auto; overflow-y: auto;">
    <div class="shop-container">
      <h2>In-Game Shop</h2>
      <div class="tab">
        <button class="tablinks active" data-category="Weapons">Weapons</button>
        <button class="tablinks" data-category="Armor">Armor</button>
        <button class="tablinks" data-category="Abilities">Abilities</button>
      </div>

      <!-- Weapons Tab Content -->
      <div id="Weapons" class="tabcontent" style="display: block;">
        <!-- Weapons Items List -->
      </div>

      <!-- Armor Tab Content -->
      <div id="Armor" class="tabcontent">
        <!-- Armor Items List -->
      </div>

      <!-- Abilities Tab Content -->
      <div id="Abilities" class="tabcontent">
        <!-- Abilities Items List -->
      </div>
    </div>

    <!-- Button to load AI-generated items -->
    <button id="load-items-button" class="btn-secondary">Load Items from AI</button>
  </div>

  <!-- Items Section -->
  <div id="ItemsSection" class="main-tabcontent text-with-border" style="flex: 1 1 auto; max-height: 100%; overflow-y: auto; padding-left: 10px;">
    <h2 class="text-with-border">Your Items</h2>
    <% if @items.present? %>
      <% @items.each do |item| %>
        <div class="item text-with-border" data-item-id="<%= item.id %>">
          <h3 class="text-with-border"><%= item.name %></h3>
          <p class="text-with-border"><strong>Level:</strong> <%= item.level %></p>
          <p class="text-with-border"><strong>Type:</strong> <%= item.item_type %></p>
          <p class="text-with-border"><strong>Description:</strong> <%= item.description %></p>
          <button class="btn delete-button">Delete</button>
          <hr>
        </div>
      <% end %>
    <% else %>
      <p class="text-with-border">You have no items.</p>
    <% end %>
  </div>

  <!-- Game Section -->
  <div id="GameSection" class="main-tabcontent" style="flex: 1 0 auto; padding-left: 10px;">
  </div>
</div>

<script>
  console.log(<%= raw @items.to_json %>)
    let shopItemsLoaded = sessionStorage.getItem("shopItemsLoaded") === "true";
    let initialized = false;

    document.addEventListener("DOMContentLoaded", initializePage);
    document.addEventListener("turbolinks:load", initializePage); // For Turbolinks
    document.addEventListener("turbo:load", initializePage); // For Turbo

    function initializePage() {
        if (initialized) {
            console.log("Page already initialized. Skipping...");
            return;
        }
        initialized = true;

        console.log("Initializing page...");
        initializeTabs();
        initializeShopTabs();
        initializeShopEvents();
        initializeDeleteButtons();

        if (!shopItemsLoaded) {
            loadShopItems();
        }
    }

    function initializeTabs() {
        const mainTabs = document.querySelectorAll(".main-tablinks");
        const mainTabContents = document.querySelectorAll(".main-tabcontent");

        mainTabs.forEach(tab => {
            tab.addEventListener("click", () => {
                const sectionId = tab.dataset.section;

                mainTabContents.forEach(content => (content.style.display = "none"));
                const targetContent = document.getElementById(sectionId);
                if (targetContent) targetContent.style.display = "block";

                mainTabs.forEach(t => t.classList.remove("active"));
                tab.classList.add("active");
            });
        });

        document.querySelector(".main-tablinks[data-section='ShopSection']").click();
    }

    function initializeShopTabs() {
        const shopTabs = document.querySelectorAll(".shop-container .tablinks");
        const shopTabContents = document.querySelectorAll(".shop-container .tabcontent");

        shopTabs.forEach(tab => {
            tab.addEventListener("click", () => {
                shopTabContents.forEach(content => (content.style.display = "none"));
                shopTabs.forEach(t => t.classList.remove("active"));

                const categoryId = tab.dataset.category;
                const categoryContent = document.getElementById(categoryId);
                if (categoryContent) categoryContent.style.display = "block";

                tab.classList.add("active");
            });
        });

        const defaultTab = document.querySelector(".shop-container .tablinks.active");
        if (defaultTab) {
            const defaultCategory = defaultTab.dataset.category;
            document.getElementById(defaultCategory).style.display = "block";
        }
    }

    async function loadShopItems() {
        const storedItems = sessionStorage.getItem("shopItems");
        let parsedItems = null;

        if (storedItems) {
            try {
                parsedItems = JSON.parse(storedItems);
                if (!Array.isArray(parsedItems)) {
                    console.warn("Stored items are not a valid array. Ignoring sessionStorage.");
                    parsedItems = null;
                }
            } catch (error) {
                console.error("Error parsing sessionStorage data:", error);
                parsedItems = null;
            }
        }

        // If valid items exist in sessionStorage, populate the shop
        if (parsedItems) {
            console.log("Loading shop items from sessionStorage...");
            populateShopTabs(parsedItems);
            shopItemsLoaded = true;
            return;
        }

        // Otherwise, fetch new items from the server
        console.log("Fetching shop items from server...");
        try {
            const response = await fetch("/gameshop/generate_items.json");
            if (!response.ok) throw new Error("Failed to fetch shop items");

            const data = await response.json();
            if (data && data.items && Array.isArray(data.items)) {
                console.log("Fetched items from server:", data.items);
                populateShopTabs(data.items);

                // Save valid items to sessionStorage for future loads
                sessionStorage.setItem("shopItems", JSON.stringify(data.items));
                shopItemsLoaded = true;
            } else {
                console.error("Invalid items data from server:", data);
            }
        } catch (error) {
            console.error("Error loading items from server:", error);
        }
    }




    function populateShopTabs(items) {
        const categoryContainers = {
            Weapons: document.getElementById("Weapons"),
            Armor: document.getElementById("Armor"),
            Abilities: document.getElementById("Abilities"),
        };

        // Clear existing items in all categories
        Object.values(categoryContainers).forEach(container => {
            if (container) container.innerHTML = "";
        });

        items.forEach(item => {
            const normalizedCategory = mapToCategoryId(item.category); // Map category to HTML ID
            const categoryContainer = categoryContainers[normalizedCategory];

            if (categoryContainer) {
                const itemDiv = createShopItemDiv(item);
                categoryContainer.appendChild(itemDiv);
            } else {
                console.error(`No container found for category: ${item.category}`);
            }
        });
    }

    // Map category to container ID
    function mapToCategoryId(category) {
        switch (category.toLowerCase()) {
            case "weapon":
                return "Weapons";
            case "armor":
                return "Armor";
            case "abilities":
                return "Abilities";
            default:
                console.error(`Unknown category in mapToCategoryId: ${category}`);
                return null;
        }
    }

  function createShopItemDiv(item) {
      const itemDiv = document.createElement("div");
      itemDiv.classList.add("item-details");
      itemDiv.dataset.category = item.category;
      itemDiv.dataset.description = item.description;
      itemDiv.dataset.level = item.level;

      itemDiv.innerHTML = `
      <h3>${item.name}</h3>
      <p>${item.description}</p>
      <p><strong>Price:</strong> ${item.price}</p>
      <button style="margin-top: 5px" class="btn-secondary buy"
        data-item-name="${item.name}"
        data-item-category="${item.category}"
        data-item-description="${item.description}"
        data-item-level="${item.level}"
        data-item-price="${item.price}">
        Buy
      </button>
    `;
      return itemDiv;
  }


  function createInventoryItemDiv(item) {
        const itemDiv = document.createElement("div");
        itemDiv.classList.add("item", "text-with-border");
        itemDiv.dataset.itemId = item.id;

        itemDiv.innerHTML = `
    <h3 class="text-with-border">${item.name}</h3>
    <p class="text-with-border"><strong>Level:</strong> ${item.level}</p>
    <p class="text-with-border"><strong>Type:</strong> ${item.item_type}</p>
    <p class="text-with-border"><strong>Description:</strong> ${item.description}</p>
    <button class="btn delete-button">Delete</button>
    <hr>
  `;
        return itemDiv;
    }

    function initializeDeleteButtons() {
        const deleteButtons = document.querySelectorAll(".delete-button");
        deleteButtons.forEach((button) => {
            if (button.dataset.listenerAttached === "true") {
                return;
            }

            button.addEventListener("click", (event) => {
                const itemElement = event.target.closest(".item");
                const itemId = itemElement.getAttribute("data-item-id");

                if (confirm("Are you sure you want to delete this item?")) {
                    fetch(`/items/${itemId}`, {
                        method: 'DELETE',
                        headers: {
                            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                            'Accept': 'application/json'
                        }
                    }).then((response) => {
                        if (response.ok) {
                            // Remove the item's element from the page
                            itemElement.remove();
                        } else {
                            alert("There was an error deleting the item.");
                        }
                    }).catch((error) => {
                        console.error("Error:", error);
                        alert("An error occurred while deleting the item.");
                    });
                }
            });
            button.dataset.listenerAttached = "true";
        });
    }

  function initializeShopEvents() {
      const shopSection = document.querySelector(".shop-container");

      shopSection.addEventListener("click", async event => {
          if (event.target.classList.contains("buy")) {
              const button = event.target;

              const backendCategory = normalizeCategory(button.dataset.itemCategory);

              const itemData = {
                  name: button.dataset.itemName,
                  category: backendCategory,
                  description: button.dataset.itemDescription,
                  level: button.dataset.itemLevel,
                  price: button.dataset.itemPrice
              };

              try {
                  const response = await fetch("/gameshop/buy", {
                      method: "POST",
                      headers: {
                          "Content-Type": "application/json",
                          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
                      },
                      body: JSON.stringify({ item: itemData })
                  });

                  const result = await response.json();
                  if (response.ok) {
                      // Existing successful flow
                      const itemsSection = document.getElementById("ItemsSection");
                      const newItemDiv = createInventoryItemDiv(result.item);
                      itemsSection.appendChild(newItemDiv);
                      initializeDeleteButtons();

                      const currentAmount = Number(document.getElementById("shard_amount").innerHTML);
                      document.getElementById("shard_amount").innerHTML = (currentAmount - itemData.price).toString();


                      alert(result.message || "Item purchased successfully!");
                  } else {
                      // If purchase fails, alert user
                      alert(result.error || "Failed to purchase item.");
                  }
              } catch (error) {
                  console.error("Error purchasing item:", error);
                  alert("An error occurred while purchasing the item.");
              }
          }
      });
  }


  // Helper to normalize categories for backend
    function normalizeCategory(category) {
        switch (category.toLowerCase()) {
            case "weapon":
            case "weapons":
                return "weapons";
            case "armor":
                return "armor";
            case "abilities":
            case "artifact":
                return "abilities";
            default:
                console.warn(`Unknown category during normalization: ${category}`);
                return category;
        }
    }

</script>
